import random
import numpy as np

# Função para calcular a distância entre duas cidades
def distance(city1, city2):
    return np.sqrt((city1[0] - city2[0]) ** 2 + (city1[1] - city2[1]) ** 2)

# Inicializa as cidades com coordenadas aleatórias
def initialize_cities(num_cities):
    return [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(num_cities)]

# Função para calcular a distância total de uma rota
def total_distance(route, cities):
    dist = 0
    for i in range(len(route) - 1):
        dist += distance(cities[route[i]], cities[route[i+1]])
    dist += distance(cities[route[-1]], cities[route[0]])  # Volta à cidade inicial
    return dist

# Ant Colony Optimization
def aco_tsp(cities, num_ants, max_iterations, alpha=1, beta=2, rho=0.5, q=100):
    num_cities = len(cities)
    pheromone = np.ones((num_cities, num_cities))  # Feromônio inicial em todos os caminhos
    visibility = np.array([[1 / (distance(cities[i], cities[j]) + 1e-10) for j in range(num_cities)] for i in range(num_cities)])

    best_route = None
    best_distance = float('inf')

    for _ in range(max_iterations):
        all_routes = []
        all_distances = []
        
        for ant in range(num_ants):
            route = [random.randint(0, num_cities - 1)]  # Começa com uma cidade aleatória
            visited = set(route)
            
            while len(route) < num_cities:
                current_city = route[-1]
                probabilities = []
                
                for next_city in range(num_cities):
                    if next_city not in visited:
                        pheromone_strength = pheromone[current_city, next_city] ** alpha
                        visibility_strength = visibility[current_city, next_city] ** beta
                        probabilities.append(pheromone_strength * visibility_strength)
                    else:
                        probabilities.append(0)
                
                total_prob = sum(probabilities)
                probabilities = [p / total_prob for p in probabilities]
                
                next_city = np.random.choice(range(num_cities), p=probabilities)
                route.append(next_city)
                visited.add(next_city)

            all_routes.append(route)
            route_distance = total_distance(route, cities)
            all_distances.append(route_distance)

            if route_distance < best_distance:
                best_distance = route_distance
                best_route = route

        # Atualizar o feromônio
        pheromone *= (1 - rho)  # Evaporação
        for i, route in enumerate(all_routes):
            route_distance = all_distances[i]
            for j in range(len(route) - 1):
                pheromone[route[j], route[j+1]] += q / route_distance
            pheromone[route[-1], route[0]] += q / all_distances[i]  # Volta à cidade inicial

    return best_route, best_distance

# Exemplo de uso
num_cities = 10  # Número de cidades
cities = initialize_cities(num_cities)  # Inicializa as cidades com coordenadas aleatórias
num_ants = 50  # Número de formigas
max_iterations = 100  # Número de iterações

best_route, best_distance = aco_tsp(cities, num_ants, max_iterations)
print("Melhor rota encontrada:", best_route)
print("Distância total:", best_distance)
